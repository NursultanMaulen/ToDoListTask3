/**
 * Todo List Application
 *
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
 * 1. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏:
 *    - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
 *    - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (–Ω–∏–∑–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π, –≤—ã—Å–æ–∫–∏–π)
 *    - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 *    - –û—Ç–º–µ—Ç–∫–∞ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
 *    - –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
 *
 * 2. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å:
 *    - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω
 *    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–≤–µ—Ç–ª–æ–π/—Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
 *    - –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
 *    - –í–∏–∑—É–∞–ª—å–Ω–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
 */

import { useState, useEffect } from "react";
import "./App.css";
import {
  AddTask,
  GetTasks,
  ToggleTask,
  DeleteTask,
  GetDarkMode,
  SetDarkMode,
} from "../wailsjs/go/main/App";

function App() {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
  const [tasks, setTasks] = useState([]);
  const [newTask, setNewTask] = useState("");
  const [dueDate, setDueDate] = useState("");
  const [priority, setPriority] = useState("medium");

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  const [darkMode, setDarkMode] = useState(false);
  const [deleteModal, setDeleteModal] = useState(false);
  const [taskToDelete, setTaskToDelete] = useState(null);
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
  const [statusFilter, setStatusFilter] = useState("all"); // all | active | completed
  const [sortBy, setSortBy] = useState("date_desc"); // date_desc | date_asc | priority
  const [dateFilter, setDateFilter] = useState("all"); // all | today | week | overdue

  useEffect(() => {
    const initApp = async () => {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏
      const tasksData = await GetTasks();
      setTasks(tasksData || []);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É
      const savedDarkMode = await GetDarkMode();
      setDarkMode(savedDarkMode);
    };

    initApp();
  }, []);

  const loadTasks = async () => {
    const tasksData = await GetTasks();
    setTasks(tasksData || []);
  };

  const handleAddTask = async (e) => {
    e.preventDefault();
    if (newTask.trim()) {
      const taskDueDate = dueDate ? new Date(dueDate) : null;
      await AddTask(newTask, taskDueDate, priority);
      setNewTask("");
      setDueDate("");
      setPriority("medium");
      loadTasks();
    }
  };

  const handleToggleTask = async (id) => {
    await ToggleTask(id);
    loadTasks();
  };

  const toggleTheme = async () => {
    const newDarkMode = !darkMode;
    const updated = await SetDarkMode(newDarkMode);
    setDarkMode(updated);
  };

  // –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
  const handleDeleteClick = (e, task) => {
    e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ onClick —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    setTaskToDelete(task);
    setDeleteModal(true);
  };

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
  const confirmDelete = async () => {
    if (taskToDelete) {
      await DeleteTask(taskToDelete.id);
      setDeleteModal(false);
      setTaskToDelete(null);
      loadTasks();
    }
  };

  // –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
  const cancelDelete = () => {
    setDeleteModal(false);
    setTaskToDelete(null);
  };

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  const filteredAndSorted = (() => {
    const now = new Date();

    // –ö–ª–æ–Ω–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
    let list = (tasks || []).slice();

    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (statusFilter === "active") {
      list = list.filter((t) => !t.completed);
    } else if (statusFilter === "completed") {
      list = list.filter((t) => t.completed);
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
    if (dateFilter === "today") {
      list = list.filter((t) => {
        if (!t.dueDate) return false;
        const d = new Date(t.dueDate);
        return d.toDateString() === now.toDateString();
      });
    } else if (dateFilter === "week") {
      const weekAhead = new Date(now);
      weekAhead.setDate(now.getDate() + 7);
      list = list.filter((t) => {
        if (!t.dueDate) return false;
        const d = new Date(t.dueDate);
        return d >= now && d <= weekAhead;
      });
    } else if (dateFilter === "overdue") {
      list = list.filter((t) => {
        if (!t.dueDate) return false;
        const d = new Date(t.dueDate);
        return d < now && !t.completed;
      });
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    const priorityRank = (p) => {
      if (!p) return 1;
      if (p === "high") return 3;
      if (p === "medium") return 2;
      return 1;
    };

    list.sort((a, b) => {
      if (sortBy === "date_asc" || sortBy === "date_desc") {
        const da = a.createdAt ? new Date(a.createdAt) : new Date(0);
        const db = b.createdAt ? new Date(b.createdAt) : new Date(0);
        return sortBy === "date_asc" ? da - db : db - da;
      }

      if (sortBy === "priority") {
        return priorityRank(b.priority) - priorityRank(a.priority);
      }

      return 0;
    });

    return list;
  })();

  return (
    <div id="App" className={darkMode ? "dark-mode" : "light-mode"}>
      <div className="container">
        <header>
          <h1>Todo List</h1>
          <button className="theme-toggle" onClick={toggleTheme}>
            {darkMode ? "‚òÄÔ∏è" : "üåô"}
          </button>
        </header>

        <form onSubmit={handleAddTask} className="task-form">
          <div className="input-group">
            <input
              type="text"
              value={newTask}
              onChange={(e) => setNewTask(e.target.value)}
              placeholder="Add a new task..."
              className="task-input"
              required
            />
            <input
              type="datetime-local"
              value={dueDate}
              onChange={(e) => setDueDate(e.target.value)}
              className="date-input"
            />
            <select
              value={priority}
              onChange={(e) => setPriority(e.target.value)}
              className="priority-select"
            >
              <option value="low">Low Priority</option>
              <option value="medium">Medium Priority</option>
              <option value="high">High Priority</option>
            </select>
          </div>
          <button type="submit" className="add-btn">
            Add Task
          </button>
        </form>

        {/* –ö–æ–Ω—Ç—Ä–æ–ª—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ */}
        <div className="controls">
          <div className="filter-group">
            <label>Filter:</label>
            <select
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
            >
              <option value="all">All</option>
              <option value="active">Active</option>
              <option value="completed">Completed</option>
            </select>
          </div>

          <div className="filter-group">
            <label>Date:</label>
            <select
              value={dateFilter}
              onChange={(e) => setDateFilter(e.target.value)}
            >
              <option value="all">Any</option>
              <option value="today">Today</option>
              <option value="week">This week</option>
              <option value="overdue">Overdue</option>
            </select>
          </div>

          <div className="filter-group">
            <label>Sort:</label>
            <select value={sortBy} onChange={(e) => setSortBy(e.target.value)}>
              <option value="date_desc">Date (newest)</option>
              <option value="date_asc">Date (oldest)</option>
              <option value="priority">Priority</option>
            </select>
          </div>
        </div>

        <div className="tasks-list">
          {(filteredAndSorted || []).map((task) => (
            <div
              key={task.id}
              className={`task-item ${task.completed ? "completed" : ""}`}
              onClick={() => handleToggleTask(task.id)}
            >
              <span className="task-checkbox">
                {task.completed ? "‚úì" : "‚óã"}
              </span>
              <div className="task-content">
                <span className="task-text">{task.text}</span>
                <div className="task-details">
                  <span className={`priority-badge ${task.priority}`}>
                    {task.priority}
                  </span>
                  {task.dueDate && (
                    <span className="due-date">
                      Deadline: {new Date(task.dueDate).toLocaleString()}
                    </span>
                  )}
                </div>
              </div>
              <button
                className="delete-btn"
                onClick={(e) => handleDeleteClick(e, task)}
              >
                √ó
              </button>
            </div>
          ))}
        </div>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è */}
        {deleteModal && (
          <div className="modal-overlay">
            <div className="modal">
              <h2>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</h2>
              <p>
                –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É "{taskToDelete?.text}"?
              </p>
              <div className="modal-buttons">
                <button className="modal-btn cancel" onClick={cancelDelete}>
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button className="modal-btn confirm" onClick={confirmDelete}>
                  –£–¥–∞–ª–∏—Ç—å
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

export default App;
